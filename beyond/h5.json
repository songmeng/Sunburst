[{"title":"jQuery和Vue学习对比","ctime":"2019-12-16 14:15:11","type":"2","label":"2","content":"\r\n    <p id=\"userName\">...</p>\r\n    <p id=\"user\">{{username}}</p>\r\n\r\n\r\n    <p>如果要给某个原素设置一个动态值，比如简单的&lt;p id=\"userName\"&gt;name:&lt;/p&gt;原素,给p原素添加姓名要求效果 name：Jim</p>\r\n    <strong>最常规的做法是在&lt;script&gt;标签内：</strong>\r\n    <div style=\"background:gainsboro;padding: 10px;\">\r\n        <pre>\r\n                    &lt;script&gt;<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(\"userName\").innerHTML = \"name：Jim\"<br>\r\n                    &lt;/script&gt;\r\n        </pre>\r\n    </div>\r\n    <p>jquery作为一个经典的JavaScript库，极大地简化了JavaScript编程。它操作原素的方式，其实和常规经典的方式是一模一样，只是在写法上<strong> 简化 </strong>了</p>\r\n    <strong>使用jquery实现相同的效果的话写法如下：</strong>\r\n    <div style=\"background:gainsboro;padding: 10px;\">\r\n        <pre>\r\n            //在头部引入jquery <br>\r\n            &lt;script src=\"https://pre.jquery.com/jquery-2.1.1.min.js\"&gt;&lt;/script&gt; <br>\r\n            &lt;script&gt;<br>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;$(\"#userName\").val() = \"name：Jim\" <br>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;$(document).ready( <br>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    function(){ <br>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <strong>$(\"#userName\").html(\"name：Jim\")</strong> <br>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    } <br>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;); <br>\r\n            &lt;/script&gt;\r\n        </pre>\r\n    </div>\r\n    <p>只是一个简单的原素自然是提现不出来简洁性，但是随着页面越来越复杂，简洁性会越来越明显。</p>\r\n    <strong>做为后来流行的vue，先看简介</strong>\r\n    <p>&nbsp;&nbsp;&nbsp;&nbsp;Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的渐进式框架。</p>\r\n    <p>&nbsp;&nbsp;&nbsp;&nbsp;Vue 只关注视图层， 采用自底向上增量开发的设计</p>\r\n    <p>&nbsp;&nbsp;&nbsp;&nbsp;Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>\r\n    <p>&nbsp;&nbsp;&nbsp;&nbsp;Vue 学习起来非常简单，使用Vue前，您需要了解：HTML、CSS、JavaScript</p>\r\n    <strong>如果使用vue实现的话，写法为：</strong>\r\n    <div style=\"background:gainsboro;padding: 10px;\">\r\n        <pre>\r\n                //在头部引入Vue <br>\r\n                &lt;script src=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\"&gt;&lt;/script&gt; <br>\r\n                //目标原素写法有些许变化 <br>\r\n                &lt;p id=\"userName\"&gt; <strong>{{username}}</strong>&lt;/p&gt; <br>\r\n                //赋值方法为：<br>\r\n                &lt;script&gt;<br>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;new Vue({ <br>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; el:userName, <br>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:{ <br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; username:\"name：Jim\"  <br>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;})<br>\r\n                &lt;/script&gt;\r\n            </pre>\r\n    </div>\r\n\r\n    <strong>简单总结：</strong>\r\n    <table border=\"1px\">\r\n        <tr>\r\n            <th>Name</th>\r\n            <th>简介</th>\r\n            <th>异同</th>\r\n        </tr>\r\n        <tr>\r\n            <td>jquery</td>\r\n            <td>曾经流行，现在也很流行的web前端js库，可是现在无论是国内还是国外他的使用率正在渐渐被其他的js库所代替，随着浏览器厂商对HTML5规范统一遵循以及ECMA6在浏览器端的实现，jquery的使用率将会越来越低\r\n            </td>\r\n            <td>jQuery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事件绑定等操作，其实和原生的HTML的区别只在于可以更方便的选取和操作DOM对象，而数据和界面是在一起的。比如需要获取label标签的内容：$(\"lable\").val();,它还是依赖DOM元素的值。\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>Vue</td>\r\n            <td>不得不提的是MVVM架构，从技术角度讲，Vue.js 专注于 MVVM 模型的 ViewModel 层。它通过双向数据绑定把 View 层和 Model\r\n                层连接了起来，通过对数据的操作就可以完成对页面视图的渲染。当然还有很多其他的mvmm框架如Angular，React都是大同小异，本质上都是基于MVVM的理念。\r\n                然而vue以他独特的优势简单，快速，组合，紧凑，强大而迅速崛起</td>\r\n            <td>Vue则是通过Vue对象将数据和View完全分离开来了。对数据进行操作不再需要引用相应的DOM对象，可以说数据和View是分离的，他们通过Vue对象这个vm实现相互的绑定。这就是传说中的MVVM。</td>\r\n        </tr>\r\n\r\n    </table>\r\n\r\n    <strong>jquery和Vue的区别：</strong>\r\n    <ol>\r\n        <li>jQuery首先要获取到dom对象，然后对dom对象进行进行值的修改等操作</li>\r\n        <li>Vue是首先把值和js对象进行绑定，然后修改js对象的值，Vue框架就会自动把dom的值就行更新。</li>\r\n        <li>可以简单的理解为Vue帮我们做了dom操作，我们以后用Vue就需要修改对象的值和做好元素和对\r\n            象的绑定，Vue这个框架就会自动帮我们做好dom的相关操作</li>\r\n        <li>这种dom元素跟随JS对象值的变化而变化叫做单向数据绑定，如果JS对象的值也跟随着dom元素的\r\n            值的变化而变化就叫做双向数据绑定</li>\r\n    </ol>\r\n\r\n    <script>\r\n        $(document).ready(\r\n            function () {\r\n                $(\"#userName\").html(\"name：Jim\")\r\n            }\r\n        );\r\n\r\n\r\n        new Vue({\r\n            el: user,\r\n            data: {\r\n                username: \"name: Vue\"\r\n            }\r\n        })\r\n\r\n\r\n\r\n\r\n    </script>\r\n"},{"title":"select、option标签，下拉菜单的值如何在表单传输？","ctime":"2020-4-27 19:17:42","type":"2","label":"2","content":"\r\n\r\n<h5>问题描述：select、option，下拉菜单的值如何在表单传输？</h5>\r\n<p>A: select 添加name属性后，form会将选中的值传递，以body的形式?  choose=type1 </p>\r\n\r\n"},{"title":"vue学习笔记","ctime":"2019-12-16 14:15:11","type":"2","label":"2","content":"\r\n    <p>学习资料来自于：<a href=\"https://www.runoob.com/vue2/vue-tutorial.html\">RUNOOB.COM Vue.js教程</a></p>\r\n    <h4>Vue.js安装</h4>\r\n    <ol>\r\n        <li>独立版本：直接下载至本地使用，由于网络问题一般较推荐</li>\r\n        <li>使用CDN方法：两个国外cdn，一个国内</li>\r\n        <p>Staticfile CDN（国内）: <a\r\n                href=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a>\r\n        </p>\r\n        <p>unpkg: <a href=\"https://unpkg.com/vue/dist/vue.js\">https://unpkg.com/vue/dist/vue.js</a> ,会保持和 npm\r\n            发布的最新的版本一致。</p>\r\n        <p>cdnjs: <a\r\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js\">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a>\r\n        </p>\r\n        <li>npm方法 <strong>???不是很懂</strong></li>\r\n    </ol>\r\n\r\n    <ul>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n    </ul>\r\n\r\n    <h4>Vue.js 目录结构</h4>\r\n    <p>有待深入学习：<a href=\"https://www.runoob.com/vue2/vue-directory-structure.html\">Vue.js 目录结构</a></p>\r\n\r\n    <h4>Vue.js 起步</h4>\r\n    <p>每个Vue应用都需要通过实例化Vue来实现，语法格式如下：</p>\r\n    <div style=\"background:gainsboro;padding: 2px;\">\r\n        <pre>\r\n            var vm = new Vue({\r\n                // 选项\r\n            })\r\n        </pre>\r\n    </div>\r\n    <p>Vue构造器包含以下原素</p>\r\n    <ul>\r\n        <li>{{}}用于输出对象属性和函数返回值</li>\r\n        <li>el参数，它是DOM原素中的id</li>\r\n        <li>data用于定义属性</li>\r\n        <li>methods用于定义的函数</li>\r\n    </ul>\r\n\r\n    <h4>Vue.js 模板语法  2019-10-10</h4>\r\n    <p>Vue.js 模板语法 <a href=\"https://www.runoob.com/vue2/vue-template-syntax.html\">https://www.runoob.com/vue2/vue-template-syntax.html</a></p>\r\n    <p>Vue.js使用了基于html的模型语法，</p>\r\n    <p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。</p>\r\n    <h5>Vue.js 插值的几种方式：</h5>\r\n    <ul>\r\n        <li><strong>文本</strong>一般使用双大括号的方式{{...}}</li>\r\n        <li><strong>Html</strong>可以使用v-html指令输出html代码</li>\r\n        <li><strong>属性</strong>HTML属性的值应使用v-bind指令</li>\r\n        <li><strong>表达式</strong>Vue.js都提供了完全的JavaScript表达式支持</li>\r\n    </ul>\r\n    <h5>指令 带有v-前缀的特殊属性</h5>\r\n    <p>指令用于在表达式的值改变时，将某些行为应用到DOM上。</p>\r\n\r\n    <ul>\r\n        <li><strong>参数</strong>参数在指令后以冒号指明。例如，v-bind指令被用来响应地更新HTML属性</li>\r\n        <li><strong>修饰符</strong>修饰符是以半角句号.指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如：.prevent修饰符告诉v-on指令对于触发的事件调用event.preventDefault():</li>\r\n        <li><strong></strong></li>\r\n        <li><strong></strong></li>\r\n    </ul>\r\n\r\n    <h5>用户输入</h5>\r\n    <p>在input输入框中我们可以使用v-model指令来实现双向数据绑定</p>\r\n    <p>v-model指令用来在input、select、textarea、checkbox、radio等表单控制原素上创建双向数据绑定，根据表单上的值，自动更新绑定的原素的值。</p>\r\n    <p>按钮的事件我们可以使用v-on监听事件，并对用户的输入进行响应。</p>\r\n\r\n    <h5>过滤器</h5>\r\n    <p>Vue.js允许你通过自定义过滤器，被用作一些常见的文本格式化。由“管道符”指示，| </p>\r\n\r\n    <h5>缩写</h5>\r\n    <p>Vue.js为两个最为常用的指令提供了特别的缩写</p>\r\n    <ul>\r\n        <li><strong>v-bind缩写    </strong>&lt;a v-bind:href=\"url\" &gt;&lt;/a&gt;  缩写为 &lt;a :href=\"url\" &gt;&lt;/a&gt;</li>\r\n        <li><strong>v-on缩写    </strong>&lt;a v-on:click=\"doSomething\" &gt;&lt;/a&gt;  缩写为 &lt;a @click=\"doSomething\" &gt;&lt;/a&gt;</li>\r\n    </ul>\r\n\r\n"},{"title":"H5引入js和css防止缓存加v","ctime":"2020-8-14 18:40:26","type":"2","label":"2","content":"\r\n<h4>H5引入js和css,客户端会缓存css或js文件，有时候会有问题，改了css样式用户使用时不更新，甚至刷新也不行。</h4>\r\n<p>其中比较主流的一种方式在js或css后面加上随机数或时间戳，css或js文件改变了版本号，客户端就会重新下载，刷新的话会解决一部分缓存的作用。下面总结了几种写法</p>\r\n<h4>平时最常用的</h4>\r\n<div style=\"background:gainsboro;padding: 5px;\">\r\n        <pre>\r\n           &lt;script type=\"text/javascript\" src=\"/js/myjs.js?v=2020814\"/&gt;\r\n        </pre>\r\n</div>\r\n<p>适合正常发布新版时，不是特别着急的情况。</p>\r\n<h4>刷新要求高，每次加载都随机情况</h4>\r\n<p>有几种不同的写法，各有利弊，写法一：</p>\r\n<div style=\"background:gainsboro;padding: 5px;\">\r\n    <pre>\r\n        &lt;script type=\"text/javascript\"/&gt;\r\n            document.write('&lt;script src=\"./js/index.js?adv='+Math.random()+'\"/&gt;&lt;\\/script/&gt;');\r\n        &lt;/script/&gt;\r\n    </pre>\r\n    写法简洁，可以满足大部分场景，缺点是注意document.write写法，必须写在head标签内\r\n</div>\r\n<p>写法二：</p>\r\n<div style=\"background:gainsboro;padding: 5px;\">\r\n        <pre>\r\n           &lt;script id=\"script_1\">&lt;/script>&lt;script>\r\n                document.getElementById('script_1').src='./js/index.js?adv='+Math.random();\r\n            &lt;/script>\r\n        </pre>\r\n</div>\r\n<p>写法三：</p>\r\n<div style=\"background:gainsboro;padding: 5px;\">\r\n        <pre>\r\n           &lt;script>\r\n              window.onload = function () {\r\n                  var el = document.createElement('script')\r\n                  var el_html = document.querySelector('html')\r\n                  var timetemp = new Date().getTime()\r\n                  el.type = 'text/javascript'\r\n                  el.src = './index.js?timetemp=' + timetemp\r\n                  el_html.appendChild(el)\r\n              }\r\n            &lt;/script>\r\n        </pre>\r\n</div>\r\n\r\n\r\n\r\n"},{"title":"script标签不能自闭合问题","ctime":"2019-12-16 14:15:11","type":"2","label":"2","content":"\r\n    <div>\r\n        <p>问题描述：自学前端遇到的坑，在html文件中引入&lt;script&gt;标签时不能自闭合，也就是不能使用&lt; <span style=\"color:#e74c3c\">/&gt;</span><span\r\n                style=\"color:null\">结束标签，必须使用&lt;/script&gt;，页面一直空白原素都加载不出来。</span></p>\r\n        <p>搜了下原因是：</p>\r\n        <div style=\"padding:10px\">\r\n            <span style=\"background:gainsboro; width: 100%;\">\r\n                &nbsp;if the element is one of the void elements, or if the element is\r\n                a foreign element, then there may be a single U+002F SOLIDUS character (/). This character has no effect\r\n                on void elements, but on foreign elements it marks the start tag as self-closing.</span></div>\r\n        <p>此外不支持自动闭合的标签还有：area, base, br, col, command, embed, hr, img, input, keygen, link, meta, param, source, track,\r\n            wbr</p>\r\n    </div>\r\n"},{"title":"前端获取iOS时间出错问题","ctime":"2020-8-13 10:39:43","type":"2","label":"2","content":"\r\n<h4>问题描述：想要实现根据后台数据返回的时间和本地时间对比，实现代码如下：</h4>\r\n\r\n<div style=\"background:gainsboro;padding: 10px;\">\r\n        <pre>\r\n            dataCompare:function (itemTime) {\r\n                //获取当前时间\r\n                var currentTime = new Date();\r\n\r\n                //自定义时间格式\r\n                itemTime= itemTime.replace(\"-\",\"/\");//替换字符，变成标准格式 <span style=\"color: red\">此行iOS会报错</span>\r\n                itemTime= new Date(Date.parse(itemTime));\r\n\r\n                console.log()\r\n                if(currentTime <= itemTime) {\r\n                    return false;\r\n                }else{\r\n                    return true;\r\n                }\r\n            },\r\n        </pre>\r\n</div>\r\n\r\n<p>代码实现思路比较简单，拿到两个时间进行对比，在Android手机没问题，在苹果手机总是返回true，后来查到获取时间在ios端会出现NaN的情况，\r\n    猜测和这个有关：ios中时间转换不兼容横杆-（new Date(\"2020-08-13 10:30:00\").getTime()）应该变为 new Date(\"2020-08-13 10:30:00\".replace(/-/g,'/')).getTime()。\r\n所以问题有两个：</p>\r\n<ol>\r\n    <li>ios中时间转换不兼容横杆-</li>\r\n    <li>需要把‘-’换成‘/’，重点是必须用 <span style=\"font-weight: bold;color: red;\">正则执行</span> </li>\r\n</ol>\r\n<h4>解决方法：</h4>\r\n<div style=\"background:gainsboro;padding: 10px;\">\r\n        <pre>\r\n                //自定义时间格式\r\n                //itemTime= itemTime.replace(\"-\",\"/\");//替换字符，变成标准格式\r\n                itemTime= itemTime.replace(/-/g,\"/\");//<span style=\"color: red\">此行修改为</span>\r\n        </pre>\r\n</div>\r\n<p>总结：虽然不是什么大问题，算是兼容性问题，但如果偶然遇见解决起来还是挺恶心的，无从下手，记一下。</p>\r\n"},{"title":"前端学习路线及资料汇总(不断补充)","ctime":"2019-12-16 14:15:11","type":"2","label":"2","content":"\r\n\r\n    <h4 style=\"padding-left: 20px\">前端学习路线</h4>\r\n    <ol style=\"list-style-type: none\">\r\n        <li>一、HTML、CSS基础、JavaScript语法基础。学完基础后，可以仿照电商网站做首页的布局。</li>\r\n        <li>二、JavaScript语法进阶。包括：作用域和闭包、this和对象原型等。相信我，JS语法，永远是面试中最重要的部分。</li>\r\n        <li>三、jQuery、Ajax等。jQuery没有过时，它仍然是前端基础的一部分。</li>\r\n        <li>四、ES6语法。这部分属于JS新增的语法，面试必问。其中，关于promise、async等内容要尤其关注。</li>\r\n        <li>五、HTML5和CSS3。要熟悉其中的新特性。</li>\r\n        <li>六、canvas。面试时，有的公司不一定会问canvas，靠运气。如果时间不够，这部分的内容可以先不学。但如果你会，绝对属于加分项。</li>\r\n        <li>七、移动Web开发、Bootstrap等。要注意移动开发中的适配和兼容性问题。</li>\r\n        <li>八、前端框架：Vue.js和React。这两个框架至少要会一个。入门时，建议先学Vue.js，上手相对容易。但无论如何，同时掌握 Vue 和 React 才是合格的前端同学。</li>\r\n    </ol>\r\n\r\n    <div style=\"padding-left: 20px\">\r\n\r\n        <h4>前端相关知识点学习汇总</h4>\r\n        <a href=\"https://zhuanlan.zhihu.com/p/63146918\">全面分析前端的网络请求方式</a>\r\n\r\n\r\n    \r\n    </div>\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n"}]