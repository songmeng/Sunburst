[{"title":"jdbc和mybatis和hibernate认识学习","ctime":"2019-12-16 14:15:11","type":"3","label":"3","content":"\r\n    <p>jbbc最简单的理解就是Java提供的一个操作数据库的API。</p>\r\n    <h4>jdbc操作数据</h4>\r\n    <ol>\r\n        <li>使用jdbc编程需要连接数据库，注册驱动和数据库信息</li>\r\n        <li>操作Connection，打开Statement对象</li>\r\n        <li>通过Statement执行SQL，返回结果到ResultSet对象</li>\r\n        <li>使用ResultSet读取数据，然后通过代码转化为具体的POJO对象</li>\r\n        <li>关闭数据库的相关资源</li>\r\n    </ol>\r\n    <h4>jdba缺点分析</h4>\r\n    <ul>\r\n        <li>工作量相对较大，每次都要去创建，关闭，获取</li>\r\n        <li>jdbc编程可能产生的异常进行捕捉处理并正确关闭资源对象关系映射（Object Relational Mapping）简称ORM</li>\r\n    </ul>\r\n    <p><strong>ORM模型</strong>就是数据库的表和简单Java对象（Plain Ordinary Java Object, 简称POJO）的映射关系模型</p>\r\n    <p>ORM模型提供了统一的规则使得数据库通过配置便可轻易的映射到POJO上，常见的有两种<strong>mybatis</strong>和<strong>Hibernate</strong>。</p>\r\n    <p>jdba和mybatis和hibernate三者关系：JDBC是地基，mybatis&hibernate是两栋外形各自有特点的楼房，楼房之间可以比较，地基就一种。</p>\r\n    <p>简单说就是mybatis和hibernate是对jdbc的封装。</p>\r\n    <h4>mybatis</h4>\r\n    <ol>\r\n        <li>易于上手和掌握。</li>\r\n        <li>sql写在xml里，便于统一管理和优化。</li>\r\n        <li>解除sql与程序代码的耦合。</li>\r\n        <li>提供映射标签，支持对象与数据库的orm字段关系映射。</li>\r\n        <li>提供对象关系映射标签，支持对象关系组建维护。</li>\r\n        <li>提供xml标签，支持编写动态sql</li>\r\n    </ol>\r\n    <h4>hibernate</h4>\r\n    <ol>\r\n        <li>消除了代码的映射规则，它全部被分离到xml或者注解里面去配置。</li>\r\n        <li>无需再管理数据库连接，它也配置到XML里面。</li>\r\n        <li>一个会话中，不要操作多个对象，只要操作Session即可。</li>\r\n        <li>关闭资源只需要关闭一个Session即可。</li>\r\n    </ol>\r\n\r\n\r\n"},{"title":"NoClassDefFoundError fastjson 和 ClassNotFoundException mysql","ctime":"2019-12-16 14:15:11","type":"3","label":"3","content":"\r\n<h5>问题描述：javaWeb项目编译过程中没什么问题，也可以顺利运行，但在页面中点击执行的时候会报错</h5>\r\n<p>搜索的结果是jar的导入方式不对，<strong>在servlet中应用到的jar不能用普通的导入方式。</strong>有两种方式解决，只尝试了第一种</p>\r\n<ul>\r\n    <li>需要将jar放到web-lib下包引用，右键add as library</li>\r\n    <li>将需要用到的的jar拷贝至tomcat的lib下</li>\r\n</ul>\r\n\r\n"},{"title":"关于执行sql文件乱码问题","ctime":"2019-12-16 14:15:11","type":"3","label":"3","content":"\r\n    <h4>1.关于执行sql文件乱码问题</h4>\r\n    <p>问题描述：</p>\r\n    <p><img alt=\"\" height=\"177\" src=\"https://static.oschina.net/uploads/space/2017/1016/113905_klui_250426.png\"\r\n            width=\"1098\" class=\"zoom-in-cursor\"></p>\r\n    <p><img alt=\"\" height=\"675\" src=\"https://static.oschina.net/uploads/space/2017/1016/113936_QzYt_250426.png\"\r\n            width=\"1091\" class=\"zoom-in-cursor\"></p>\r\n    <p>解决方法：曾尝试查&nbsp;<span style=\"color:#FF0000\"><em><a href=\"http://www.jb51.net/article/92603.htm\"\r\n                    rel=\"nofollow\">网络资料</a>&nbsp;</em></span>解决，没有效果，最后通过更改sql文件中的编码由GBK修改为UTF-8,最终解决，如图</p>\r\n    <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" height=\"98\"\r\n            src=\"https://static.oschina.net/uploads/space/2017/1016/114454_fDtL_250426.jpg\" width=\"383\"\r\n            class=\"zoom-in-cursor\"></p>\r\n    <p><img></p>\r\n\r\n\r\n\r\n"},{"title":"转-Spring的概述","ctime":"2019-12-16 14:15:11","type":"3","label":"3","content":"\r\n\r\n    <p>转自：<a\r\n            href=\"https://blog.csdn.net/yerenyuan_pku/article/details/69663685\">https://blog.csdn.net/yerenyuan_pku/article/details/69663685</a>\r\n    </p>\r\n\r\n    <div>\r\n        <!-- flowchart 箭头图标 勿删 -->\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n            <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\"\r\n                style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n        </svg>\r\n        <h1 id=\"spring的概述\"><a name=\"t0\"></a>Spring的概述</h1>\r\n        <h2 id=\"什么是spring\"><a name=\"t1\"></a>什么是Spring</h2>\r\n        <p>据度娘所载：</p>\r\n        <blockquote>\r\n            <p>Spring是一个开源框架，Spring是于2003年兴起的一个轻量级的Java开发框架，由Rod\r\n                Johnson创建。简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式)轻量级开源框架。</p>\r\n        </blockquote>\r\n        <p>Spring是一个开源框架，Spring是于2003年兴起的一个轻量级的Java开发框架，由Rod Johnson在其著作Expert One-On-One J2EE Development and\r\n            Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为J2EE应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<strong>Spring的核心是控制反转(IoC)和面向切面(AOP)。简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式)轻量级开源框架</strong>。\r\n        </p>\r\n        <p>为什么说Spring是一个一站式的轻量级开源框架呢？EE开发可分成三层架构，针对JavaEE的三层结构，每一层Spring都提供了不同的解决技术。</p>\r\n        <ul>\r\n            <li>WEB层：SpringMVC</li>\r\n            <li>业务层：Spring的IoC</li>\r\n            <li>持久层：Spring的JDBCTemplate(Spring的JDBC模板，ORM模板用于整合其他的持久层框架)</li>\r\n        </ul>\r\n        <p>从上面的简要介绍中，我们要知道Spring的核心有两部分：</p>\r\n        <ul>\r\n            <li>IoC：控制反转。 <br>\r\n                举例来说，在之前的操作中，比方说有一个类，我们想要调用类里面的方法(不是静态方法)，就要创建类的对象，使用对象调用方法实现。对于Spring来说，Spring创建对象的过程，不是在代码里面实现的，而是交给Spring来进行配置实现的。\r\n            </li>\r\n            <li>AOP：面向切面编程。 <br>\r\n                之前，讲Struts2框架的拦截器时，我们就已稍微讲了一下，在Spring学习过程中，我们会着重来讲它。但是本文并不会过多阐述它，下文再讲。</li>\r\n        </ul>\r\n        <h2 id=\"为什么spring\"><a name=\"t2\"></a>为什么Spring</h2>\r\n        <ul>\r\n            <li>方便解耦，简化开发。 <br>\r\n                Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理。</li>\r\n            <li>AOP编程的支持 <br>\r\n                Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</li>\r\n            <li>声明式事务的支持 <br>\r\n                只需要通过配置就可以完成对事务的管理，而无须手动编程。</li>\r\n            <li>方便程序的测试 <br>\r\n                Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li>\r\n            <li>方便集成各种优秀的框架 <br>\r\n                Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架(如：Struts2、Hibernate、MyBatis、Quartz等)的直接支持。</li>\r\n            <li>降低JavaEE API的使用难度 <br>\r\n                Spring对JavaEE开发中非常难用的一些API(JDBC、JavaMail、远程调用等)，都提供了封装，使这些API应用难度大大降低。</li>\r\n        </ul>\r\n        <h2 id=\"spring的版本\"><a name=\"t3\"></a>Spring的版本</h2>\r\n        <p>我这儿使用的Spring的版本是spring-framework-4.2.4.RELEASE。</p>\r\n        <h1 id=\"spring的入门案例\"><a name=\"t4\"></a>Spring的入门案例</h1>\r\n        <h2 id=\"ioc的底层实现原理\"><a name=\"t5\"></a>IOC的底层实现原理</h2>\r\n        <p>IOC：Inversion of\r\n            Control，控制反转。指的是对象的创建权反转(交给)给Spring，其作用是实现了程序的解耦合。也可这样解释：获取对象的方式变了。对象创建的控制权不是“使用者”，而是“框架”或者“容器”。 <br>\r\n            用更通俗的话来说，IOC就是指对象的创建，并不是在代码中用new操作new出来的，而是通过Spring进行配置创建的。其底层实现原理是<strong>XML配置文件+SAX解析+工厂设计模式</strong>。\r\n            <br>\r\n            就拿持久层(也即dao(data access object，数据访问对象)层)的开发来说，官方推荐做法是先创建一个接口，然后再创建接口对应的实现类。 <br>\r\n            先创建一个Userdao接口</p>\r\n        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> UserDao {\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>();\r\n}\r\n</code>\r\n</pre>\r\n        <p>再创建Userdao接口的UserDaoImpl实现类</p>\r\n        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs java has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserDao</span> {</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>() {\r\nbalabala......\r\n}\r\n}</code>\r\n\r\n</pre>\r\n        <p>接着我们在service层调用dao层，核心代码如下：</p>\r\n        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs oxygene has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">// 接口 实例变量 = new 实现类</span>\r\nUserDao dao = <span class=\"hljs-keyword\">new</span> UserDaoImpl();\r\ndao.<span class=\"hljs-keyword\">add</span>();</code></pre>\r\n        <p>可发现缺点：service层和dao层耦合度太高了。解决方法是使用工厂模式进行解耦合操作。 <br>\r\n            创建一个工厂类，在工厂类中提供一个方法，返回实现类的对象。</p>\r\n        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Factory {\r\n<span class=\"hljs-comment\">// 提供返回实现类对象的方法</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserDao <span class=\"hljs-title\">getUserDaoImpl</span>() {\r\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> UserDaoImpl();\r\n}\r\n}</code>\r\n</pre>\r\n        <p>然后在service层调用dao层的核心代码就变为：</p>\r\n        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs avrasm has-numbering\" onclick=\"mdcp.signin(event)\">UserDao dao = Factory<span class=\"hljs-preprocessor\">.getUserDaoImpl</span>()<span class=\"hljs-comment\">;</span>\r\ndao<span class=\"hljs-preprocessor\">.add</span>()<span class=\"hljs-comment\">;</span></code>\r\n</pre>\r\n\r\n        <p>如若这样做，会发现又产生了一个缺点：service层和工厂类又耦合了。所以使用工厂模式进行解耦合也只是一种权宜之计。下面我就来简单讲讲Spring IOC的底层实现原理：</p>\r\n\r\n        <ul>\r\n            <li>\r\n                <p>配置文件中可能会有如下配置信息：</p>\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs applescript has-numbering\" onclick=\"mdcp.signin(event)\">&lt;bean <span class=\"hljs-property\">id</span>=<span class=\"hljs-string\">\"userDaoImpl\"</span> <span class=\"hljs-type\">class</span>=<span class=\"hljs-string\">\"cn.itcast.dao.impl.UserDaoImpl\"</span> /&gt;</code>\r\n                    </pre>\r\n            </li>\r\n            <li>\r\n                <p>也是要创建一个工厂类，在工厂类中提供一个返回实现类对象的方法，但并不是直接new实现类，而是使用SAX解析配置文件，根据标签bean中的id属性值得到对应的class属性值，使用反射创建实现类对象。\r\n                </p>\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Factory {\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserDao <span class=\"hljs-title\">getUserDaoImpl</span>() {\r\n<span class=\"hljs-comment\">// 1.使用SAX解析得到配置文件内容</span>\r\n<span class=\"hljs-comment\">// 直接根据id值userDaoImpl得到class属性值</span>\r\nString classvalue = <span class=\"hljs-string\">\"class属性值\"</span>;\r\n<span class=\"hljs-comment\">// 2.使用反射得到对象</span>\r\nClass clazz = Class.forName(classvalue);\r\nUserDaoImpl userDaoImpl = (UserDaoImpl)lazz.newInstance();\r\n<span class=\"hljs-keyword\">return</span> userDaoImpl;\r\n}\r\n}</code></pre>\r\n\r\n        <h2 id=\"面向对象设计的七大原则\"><a name=\"t6\"></a>面向对象设计的七大原则</h2>\r\n\r\n        <p>这里我稍微讲一下面向对象设计的七大原则，不必强记，重在理解。</p>\r\n\r\n        <ol>\r\n            <li>单一职责原则（Single Responsibility Principle）：每一个类应该专注于做一件事情。</li>\r\n            <li>里氏替换原则（Liskov Substitution Principle）：超类存在的地方，子类是可以替换的。</li>\r\n            <li>依赖倒置原则（Dependence Inversion Principle）：实现尽量依赖抽象，不依赖具体实现。</li>\r\n            <li>接口隔离原则（Interface Segregation Principle）：应当为客户端提供尽可能小的单独的接口，而不是提供大的总的接口。</li>\r\n            <li>迪米特法则（Law Of Demeter）：又叫最少知识原则，一个软件实体应当尽可能少的与其他实体发生相互作用。</li>\r\n            <li>开闭原则（Open Close Principle）：面向扩展开放，面向修改关闭。</li>\r\n            <li>组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP）：尽量使用组合/聚合达到复用，尽量少用继承。原则： 一个类中有另一个类的对象。</li>\r\n        </ol>\r\n\r\n\r\n\r\n        <h2 id=\"spring的ioc入门\"><a name=\"t7\"></a>Spring的IOC入门</h2>\r\n\r\n\r\n\r\n        <h3 id=\"步骤一下载spring的开发包\"><a name=\"t8\"></a>步骤一：下载Spring的开发包</h3>\r\n\r\n        <p>Spring的官网是<a href=\"http://spring.io\" rel=\"nofollow\" target=\"_blank\">http://spring.io</a>。Spring的开发包的下载地址是<a\r\n                href=\"http://repo.springsource.org/libs-release-local/org/springframework/spring\" rel=\"nofollow\"\r\n                target=\"_blank\">http://repo.springsource.org/libs-release-local/org/springframework/spring</a>，上面说过，我下载的是spring-framework-4.2.4.RELEASE。解压缩之后，可发现Spring开发包的目录结构如下：\r\n            <br>\r\n            <img src=\"https://img-blog.csdn.net/20170408002146171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWVyZW55dWFuX3BrdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\"\r\n                alt=\"这里写图片描述\" title=\"\"></p>\r\n\r\n        <ul>\r\n            <li>docs：API和开发规范</li>\r\n            <li>libs：Jar包和源码</li>\r\n            <li>schema：约束</li>\r\n        </ul>\r\n\r\n        <h3 id=\"步骤二创建web项目引入spring的开发包\"><a name=\"t9\"></a>步骤二：创建Web项目，引入Spring的开发包</h3>\r\n\r\n        <p>从下图可知： <br>\r\n            <img src=\"https://img-blog.csdn.net/20170408002245422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWVyZW55dWFuX3BrdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\"\r\n                alt=\"这里写图片描述\" title=\"\"> <br>\r\n            由于我们只是初次入门Spring，所以也只是使用Spring的基本功能，所以需要使用到下面的这4个Jar包： <br>\r\n            <img src=\"https://img-blog.csdn.net/20170408002331172?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWVyZW55dWFuX3BrdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\"\r\n                alt=\"这里写图片描述\" title=\"\"> <br>\r\n            除此之外，还要导入Spring支持的日志Jar包： <br>\r\n            <img src=\"https://img-blog.csdn.net/20170408002415672?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWVyZW55dWFuX3BrdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\"\r\n                alt=\"这里写图片描述\" title=\"\"></p>\r\n\r\n        <h3 id=\"步骤三编写相关的类在类中创建方法\"><a name=\"t10\"></a>步骤三：编写相关的类，在类中创建方法</h3>\r\n\r\n        <p>在src目录下创建一个cn.itcast.ioc包，并在该包下创建一个User类。</p>\r\n\r\n\r\n\r\n        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> User {\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"add.................\"</span>);\r\n}\r\n}</code></pre>\r\n\r\n\r\n\r\n                <h3 id=\"步骤三创建spring配置文件\"><a name=\"t11\"></a>步骤三：创建Spring配置文件</h3>\r\n\r\n                <p>注意：Spring配置文件的名称和位置没有固定要求，一般建议把该文件放到src下面，名称可随便写，官方建议写成applicationContext.xml。但我觉得这个文件名称太长了，所以决定写为bean1.xml。然后我们还需要在配置文件中引入约束，Spring学习阶段的约束是schema约束。那么问题来了，这个约束又该怎么写呢？可参考<code>docs\\spring-framework-reference\\html</code>目录下的xsd-configuration.html文件，在其内容最后找到如下内容：\r\n                </p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">beans</span> <span class=\"hljs-attribute\">xmlns</span>=<span class=\"hljs-value\">\"http://www.springframework.org/schema/beans\"</span>\r\n<span class=\"hljs-attribute\">xmlns:xsi</span>=<span class=\"hljs-value\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\r\n<span class=\"hljs-attribute\">xsi:schemaLocation</span>=<span class=\"hljs-value\">\"\r\nhttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\r\n\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"foo\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"x.y.Foo\"</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">meta</span> <span class=\"hljs-attribute\">key</span>=<span class=\"hljs-value\">\"cacheName\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"foo\"</span>/&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"name\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Rick\"</span>/&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span>\r\n\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">beans</span>&gt;</span></code>\r\n</pre>\r\n                <p>然后将其复制黏贴到配置文件bean1.xml中，将其修改为：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">beans</span> <span class=\"hljs-attribute\">xmlns</span>=<span class=\"hljs-value\">\"http://www.springframework.org/schema/beans\"</span>\r\n<span class=\"hljs-attribute\">xmlns:xsi</span>=<span class=\"hljs-value\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\r\n<span class=\"hljs-attribute\">xsi:schemaLocation</span>=<span class=\"hljs-value\">\"\r\nhttp://www.springframework.org/schema/beans \r\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">beans</span>&gt;</span></code>\r\n</pre>\r\n                <h3 id=\"步骤四在配置文件中配置对象的创建\"><a name=\"t12\"></a>步骤四：在配置文件中配置对象的创建</h3>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">&lt;!-- 1.配置user对象的创建 --&gt;</span> \r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"user\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.ioc.User\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n                <h3 id=\"步骤五编写测试程序\"><a name=\"t13\"></a>步骤五：编写测试程序</h3>\r\n                <p>我们要在Spring中写代码来实现获取bean1.xml文件中配置的对象（该段代码不要求重点掌握，只是用在测试中而已）。这段代码主要用来解析Spring配置文件得到对象，但这个过程不需要我们写代码实现，Spring封装了一个对象帮我们进行了这些操作，这个对象叫ApplicationContext，它就能实现这个功能。\r\n                    <br>\r\n                    在cn.itcast.ioc包下创建一个TestIOC单元测试类，如下：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TestIOC {\r\n\r\n<span class=\"hljs-comment\">// 得到配置的user对象</span>\r\n@Test\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">demo1</span>() {\r\n<span class=\"hljs-comment\">// 1.加载Spring配置文件，把配置文件中的对象进行创建</span>\r\nApplicationContext context = \r\n    <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean1.xml\"</span>); <span class=\"hljs-comment\">// classpath：类路径，src目录下的文件最终要编译到类路径下</span>\r\n<span class=\"hljs-comment\">// 2.根据配置文件的id得到user对象</span>\r\nUser user = (User) context.getBean(<span class=\"hljs-string\">\"user\"</span>);\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(user);\r\nuser.add();\r\n}\r\n}</code>\r\n</pre>\r\n                <p><strong>注意：classpath为类路径，src目录下的文件最终要编译到类路径下</strong>。</p>\r\n                <h1 id=\"spring的bean管理\"><a name=\"t14\"></a>Spring的bean管理</h1>\r\n                <p>通俗一点说，Spring的bean管理即指创建对象时不需要new操作代码实现，而是交给Spring进行配置完成。 <br>\r\n                    Spring进行bean管理有两种方式：</p>\r\n                <ol>\r\n                    <li>使用配置文件方式实现</li>\r\n                    <li>使用注解方式实现</li>\r\n                </ol>\r\n                <p>本文将重点放在第一种方式上，后一种方式后面会讲。</p>\r\n                <h2 id=\"spring实例化bean的三种方式\"><a name=\"t15\"></a>Spring实例化bean的三种方式</h2>\r\n                <h3 id=\"使用无参构造重点\"><a name=\"t16\"></a>使用无参构造（重点）</h3>\r\n                <p>创建对象时候，调用类里面的无参数的构造方法实现。那么Spring配置文件中又该怎样写呢？基本类似于如下写法：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">&lt;!-- 1.配置user对象的创建 --&gt;</span> \r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"user\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.ioc.User\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n                <h3 id=\"使用静态工厂了解\"><a name=\"t17\"></a>使用静态工厂（了解）</h3>\r\n                <p>创建一个工厂类，在工厂类中提供一个静态的方法，这个方法返回类的对象；调用工厂类的方法时候，直接使用<code>类名.方法名称</code>即可以调用。下面举例来说明。 <br>\r\n                    在src目录下创建一个cn.itcast.bean包，并在该包下创建一个Bean1类。</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Bean1 {\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bean1</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"bean1..........\"</span>);\r\n}\r\n\r\n}</code>\r\n</pre>\r\n                <p>然后在该包下创建一个Bean1Factory工厂类。</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Bean1Factory {\r\n\r\n<span class=\"hljs-comment\">// 静态方法</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Bean1 <span class=\"hljs-title\">getBean1</span>() {\r\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Bean1();\r\n}\r\n}</code>\r\n</pre>\r\n                <p>接着Spring配置文件中应向下面这样配置：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">&lt;!-- 2.使用静态工厂创建对象 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"bean1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.bean.Bean1Factory\"</span> <span class=\"hljs-attribute\">factory-method</span>=<span class=\"hljs-value\">\"getBean1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n                <p>最后在该包下创建一个TestIOC单元测试类。</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TestIOC {\r\n\r\n@Test\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">demo1</span>() {\r\n<span class=\"hljs-comment\">// 1.加载Spring配置文件，把配置文件中的对象进行创建</span>\r\nApplicationContext context = \r\n    <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean1.xml\"</span>);\r\n<span class=\"hljs-comment\">// 2.根据配置文件的id得到user对象</span>\r\nBean1 bean1 = (Bean1) context.getBean(<span class=\"hljs-string\">\"bean1\"</span>);\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(bean1);\r\n}\r\n}</code>\r\n</pre>\r\n                <h3 id=\"使用实例工厂了解\"><a name=\"t18\"></a>使用实例工厂（了解）</h3>\r\n                <p>创建一个工厂类，在工厂类里面提供一个普通的方法，这个方法返回类对象；调用工厂类的方法时候，创建工厂类对象，使用对象调用方法即可。下面也举例来说明。 <br>\r\n                    在src目录下的cn.itcast.bean包下创建一个Bean2类。</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Bean2 {\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bean2</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"bean2..........\"</span>);\r\n}\r\n}</code></pre>\r\n                <p>然后在该包下创建一个Bean2Factory工厂类。</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Bean2Factory {\r\n\r\n<span class=\"hljs-keyword\">public</span> Bean2 <span class=\"hljs-title\">getBean2</span>() {\r\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Bean2();\r\n}\r\n\r\n}</code>\r\n</pre>\r\n\r\n                <p>接着Spring配置文件中应向下面这样配置：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\"\r\n                    name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">&lt;!-- 3.使用实例工厂创建对象 --&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- 3.1先创建工厂对象 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"bean2Factory\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.bean.Bean2Factory\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- 3.2再使用工厂对象创建bean2对象 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"bean2\"</span> <span class=\"hljs-attribute\">factory-bean</span>=<span class=\"hljs-value\">\"bean2Factory\"</span> <span class=\"hljs-attribute\">factory-method</span>=<span class=\"hljs-value\">\"getBean2\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code></pre>\r\n\r\n                <p>最后将TestIOC单元测试类的代码修改为：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TestIOC {\r\n\r\n@Test\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">demo1</span>() {\r\n<span class=\"hljs-comment\">// 1.加载Spring配置文件，把配置文件中的对象进行创建</span>\r\nApplicationContext context = \r\n    <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean1.xml\"</span>);\r\n<span class=\"hljs-comment\">// 2.根据配置文件的id得到user对象</span>\r\nBean2 bean2 = (Bean2) context.getBean(<span class=\"hljs-string\">\"bean2\"</span>);\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(bean2);\r\n}\r\n}</code>\r\n</pre>\r\n                <h2 id=\"spring配置文件中bean标签常用的属性\"><a name=\"t19\"></a>Spring配置文件中bean标签常用的属性</h2>\r\n                <p>Spring配置文件中bean标签常用的属性有以下四种：</p>\r\n\r\n                <ol>\r\n                    <li>id属性：根据id属性值得到配置对象。 <br>\r\n                        在Spring配置文件中会有多个bean标签，但它们的id属性值是不能相同的。Bean起名字时，在约束中采用的是ID约束——唯一，而且名字必须以字母开始，可以使用字母、数字、连字符、下划线、句号、冒号等，但id属性值不能有特殊符号。\r\n                    </li>\r\n                    <li>class属性：要创建对象的类的全路径。</li>\r\n                    <li>\r\n                        <p>scope属性：bean的作用范围。 <br>\r\n                            scope属性共有以下5个属性：</p>\r\n\r\n                        <ul>\r\n                            <li>\r\n                                <p>singleton：创建的对象是单例的，也是scope属性的默认值。 <br>\r\n                                    下面我来举例说明它。将TestIOC单元测试类的代码修改为：</p>\r\n\r\n                                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TestIOC {\r\n\r\n<span class=\"hljs-comment\">// 得到配置的user对象</span>\r\n@Test\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">demo1</span>() {\r\n<span class=\"hljs-comment\">// 1.加载Spring配置文件，把配置文件中的对象进行创建</span>\r\nApplicationContext context = \r\n    <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean1.xml\"</span>);\r\n<span class=\"hljs-comment\">// 2.根据配置文件的id得到user对象</span>\r\nUser user1 = (User) context.getBean(<span class=\"hljs-string\">\"user\"</span>);\r\nUser user2 = (User) context.getBean(<span class=\"hljs-string\">\"user\"</span>);\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(user1);\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(user2);\r\n}\r\n}</code>\r\n</pre>\r\n\r\n                                <p>单元测试以上方法，一切就尽在不言中。其实，此时Spring配置文件中有关如下bean的配置：</p>\r\n\r\n                                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"user\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.ioc.User\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n                            </pre>\r\n\r\n                                <p>就相当于：</p>\r\n\r\n                                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"user\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.ioc.User\"</span> <span class=\"hljs-attribute\">scope</span>=<span class=\"hljs-value\">\"singleton\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n                            </pre>\r\n                            </li>\r\n                            <li>\r\n                                <p>prototype：创建的对象是多实例的。 <br>\r\n                                    也可举例来说明它。将Spring配置文件中有关如下bean的配置：</p>\r\n\r\n                                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"user\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.ioc.User\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n                            </pre>\r\n\r\n                                <p>修改为：</p>\r\n\r\n                                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"user\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.ioc.User\"</span> <span class=\"hljs-attribute\">scope</span>=<span class=\"hljs-value\">\"prototype\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code> \r\n                            </pre>\r\n\r\n                                <p>测试单元测试类的方法就能明白了。</p>\r\n                            </li>\r\n                            <li>globalSession：用在<strong>单点登录(即SSO，single sign on)</strong>上。</li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>name属性：name属性的功能和id属性是一样的。name属性和id属性区别是：在id属性值里面不能有特殊符号，在name属性值里面可以添加特殊符号。</li>\r\n                </ol>\r\n\r\n\r\n\r\n                <h2 id=\"bean的生命周期的配置\"><a name=\"t20\"></a>bean的生命周期的配置</h2>\r\n\r\n                <p>通过配置<code>&lt;bean&gt;</code>标签上的init-method作为bean的初始化的时候执行的方法，配置destroy-method作为bean的销毁的时候执行的方法。销毁方法想要执行，需要是单例创建的Bean而且在工厂关闭的时候，Bean才会被销毁。\r\n                </p>\r\n\r\n\r\n\r\n                <h2 id=\"spring中bean的属性注入\"><a name=\"t21\"></a>Spring中Bean的属性注入</h2>\r\n\r\n                <p>实际上，有关Bean的属性注入共有三种方式，下面我分别加以简单的说明：</p>\r\n\r\n                <ol>\r\n                    <li>\r\n                        <p>set方法注入 <br>\r\n                            用代码可表示如下：</p>\r\n\r\n                        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Book {\r\n\r\n<span class=\"hljs-keyword\">private</span> String bookname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBookname</span>(String bookname) {\r\n<span class=\"hljs-keyword\">this</span>.bookname = bookname;\r\n}\r\n\r\n}\r\n\r\nBook book = <span class=\"hljs-keyword\">new</span> Book();\r\nbook.setBookName(<span class=\"hljs-string\">\"Java编程思想\"</span>);</code>\r\n</pre>\r\n                    </li>\r\n                    <li>\r\n                        <p>有参数构造注入 <br>\r\n                            用代码可表示如下：</p>\r\n\r\n                        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Book {\r\n\r\n<span class=\"hljs-keyword\">private</span> String bookname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Book</span>(String bookname) {\r\n<span class=\"hljs-keyword\">this</span>.bookname = bookname;\r\n}\r\n\r\n}\r\n\r\nBook book = <span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-string\">\"代码大全\"</span>);</code>\r\n</pre>\r\n                    </li>\r\n                    <li>\r\n                        <p>接口注入 <br>\r\n                            先编写一个接口：</p>\r\n\r\n                        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> Dao {\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>(String name);\r\n}</code></pre>\r\n\r\n                        <p>再编写这个接口的实现类：</p>\r\n\r\n                        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs java has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Dao</span> {</span>\r\n<span class=\"hljs-keyword\">private</span> String name;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>(String name) {\r\n<span class=\"hljs-keyword\">this</span>.name = name;\r\n}\r\n}</code>\r\n</pre>\r\n                    </li>\r\n                </ol>\r\n\r\n                <p>但在Spring框架里面，只支持前两种方式，即set方法注入和有参数构造注入。下面我来举例分别演示。</p>\r\n\r\n\r\n\r\n                <h3 id=\"构造方法的方式注入属性\"><a name=\"t22\"></a>构造方法的方式注入属性</h3>\r\n\r\n                <p>在src目录下创建一个cn.itcast.property包，并在该包下编写一个Book实体类。</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Book {\r\n\r\n<span class=\"hljs-keyword\">private</span> String bookname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Book</span>(String bookname) {\r\n<span class=\"hljs-keyword\">this</span>.bookname = bookname;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testBook</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"book..............\"</span> + bookname);\r\n}\r\n\r\n}</code>\r\n</pre>\r\n\r\n                <p>接着在Spring配置文件中对以上JavaBean添加如下配置：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">&lt;!-- 4.使用有参数的构造注入属性 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"book\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.property.Book\"</span>&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- 使用标签，name：为属性的名字；value：为属性的值 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">constructor-arg</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"bookname\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"beautifulMan_美美侠\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">constructor-arg</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code></pre>\r\n\r\n                <p>最后在该包下编写一个TestIOC单元测试类：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TestIOC {\r\n\r\n@Test\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">demo1</span>() {\r\n<span class=\"hljs-comment\">// 1.加载Spring配置文件，把配置文件中的对象进行创建</span>\r\nApplicationContext context = \r\n    <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean1.xml\"</span>);\r\n\r\nBook book = (Book) context.getBean(<span class=\"hljs-string\">\"book\"</span>);\r\nbook.testBook();\r\n}\r\n}</code>\r\n</pre>\r\n\r\n                <p>自己自行测试去吧！</p>\r\n\r\n\r\n\r\n                <h3 id=\"set方法的方式注入属性\"><a name=\"t23\"></a>set方法的方式注入属性</h3>\r\n\r\n                <p>我们同样在cn.itcast.property包下编写一个Person实体类，在类中定义属性，并生成set方法。</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Person {\r\n\r\n<span class=\"hljs-comment\">// 1.定义一个属性</span>\r\n<span class=\"hljs-keyword\">private</span> String username;\r\n\r\n<span class=\"hljs-comment\">// 2.生成这个属性的set方法</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUsername</span>(String username) {\r\n<span class=\"hljs-keyword\">this</span>.username = username;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testperson</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"person..............\"</span> + username);\r\n}\r\n\r\n}</code>\r\n</pre>\r\n\r\n                <p>然后在Spring配置文件中，使用bean标签创建对象，在bean标签里面使用property标签注入属性。即在Spring配置文件中对以上JavaBean添加如下配置，</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">&lt;!-- 5.使用set方法进行注入属性 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"person\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.property.Person\"</span>&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!--\r\n使用property标签注入属性值\r\nname：类属性名称\r\nvalue属性：往属性中注入的值\r\n--&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"username\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"李阿昀\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n\r\n                <p>最后将TestIOC单元测试类的代码修改为：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TestIOC {\r\n\r\n@Test\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">demo1</span>() {\r\n<span class=\"hljs-comment\">// 1.加载Spring配置文件，把配置文件中的对象进行创建</span>\r\nApplicationContext context = \r\n    <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean1.xml\"</span>);\r\n\r\nPerson person = (Person)context.getBean(<span class=\"hljs-string\">\"person\"</span>);\r\nperson.testperson();\r\n}\r\n}</code>\r\n</pre>\r\n\r\n                <p>自己自行测试去吧！</p>\r\n\r\n\r\n\r\n                <h2 id=\"spring的属性注入对象类型的注入\"><a name=\"t24\"></a>Spring的属性注入：对象类型的注入</h2>\r\n\r\n                <p>在实际开发中，我们要提交表单到action里面去，然后在action里面调用service层的方法，接着在service层里面调用dao层的方法。在这里，我假设在service层里面调用dao层的方法，所以需要在servcie层里面创建dao层的对象实现调用。\r\n                    <br>\r\n                    先在src目录下创建一个cn.itcast.dao包，并在该包下编写一个UserDao类。</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> UserDao {\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"dao................\"</span>);\r\n}\r\n}</code></pre>\r\n\r\n                <p>然后在src目录下再创建一个cn.itcast.service包，并在该包下编写一个UserService类。</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> UserService {\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"service.........\"</span>);\r\n<span class=\"hljs-comment\">// 调用dao</span>\r\nbalabala......\r\n}\r\n\r\n}</code>\r\n</pre>\r\n\r\n                <p>如果我们使用最原始的方式在service层里面调用dao层的方法，那么UserService类中add()方法应这样写：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"service.........\"</span>);\r\n<span class=\"hljs-comment\">// 原始方式，调用dao</span>\r\nUserDao dao = <span class=\"hljs-keyword\">new</span> UserDao();\r\ndao.add();\r\n}</code></pre>\r\n\r\n                <p>在Spring里面，我们就应该这么玩了。我们的最终目的是在service层里面得到dao层对象。所以步骤为：</p>\r\n\r\n                <ol>\r\n                    <li>\r\n                        <p>第一步，让dao作为service的一个属性。</p>\r\n\r\n                        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">// 1.让dao作为service的一个属性</span>\r\n<span class=\"hljs-keyword\">private</span> UserDao userDao;</code>\r\n</pre>\r\n                    </li>\r\n                    <li>\r\n                        <p>第二步，生成dao属性的set方法。</p>\r\n\r\n                        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">// 2.生成dao属性的set方法</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUserDao</span>(UserDao userDao) {\r\n<span class=\"hljs-keyword\">this</span>.userDao = userDao;\r\n}</code>\r\n</pre>\r\n\r\n                        <p>这时，UserService类的代码就变成：</p>\r\n\r\n                        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> UserService {\r\n\r\n<span class=\"hljs-comment\">// 1.让dao作为service的一个属性</span>\r\n<span class=\"hljs-keyword\">private</span> UserDao userDao;\r\n\r\n<span class=\"hljs-comment\">// 2.生成dao属性的set方法</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUserDao</span>(UserDao userDao) {\r\n<span class=\"hljs-keyword\">this</span>.userDao = userDao;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"service.........\"</span>);\r\nuserDao.add();\r\n}\r\n\r\n}\r\n</code>\r\n</pre>\r\n                    </li>\r\n                    <li>\r\n                        <p>在Spring配置文件中进行配置和注入。</p>\r\n\r\n                        <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">&lt;!-- 6.注入对象的属性 --&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- 6.1先创建dao对象 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"userDao\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.dao.UserDao\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- 6.2再创建service对象    --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"userService\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.service.UserService\"</span>&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- 在servcie里面注入userDao属性\r\nname属性：service对象里面的userDao属性的名称\r\n注入dao对象，不能写value属性，要写ref属性：dao配置的bean的id值\r\n--&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"userDao\"</span> <span class=\"hljs-attribute\">ref</span>=<span class=\"hljs-value\">\"userDao\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n                    </li>\r\n                </ol>\r\n\r\n\r\n\r\n                <h2 id=\"名称空间p的属性注入方式spring2x版本后提供的方式\"><a name=\"t25\"></a>名称空间p的属性注入方式——Spring2.x版本后提供的方式</h2>\r\n\r\n                <p>在src目录下创建一个cn.itcast.propertydemo包，并在该包下编写一个Orders实体类。</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Orders {\r\n\r\n<span class=\"hljs-keyword\">private</span> String oname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setOname</span>(String oname) {\r\n<span class=\"hljs-keyword\">this</span>.oname = oname;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testorders</span>() {\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"orders................\"</span> + oname);\r\n}\r\n}</code>\r\n</pre>\r\n\r\n                <p>接下来我们需要在Spring核心配置文件中的schema约束位置定义p名称空间。</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs avrasm has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-label\">xmlns:</span>p=<span class=\"hljs-string\">\"http://www.springframework.org/schema/p\"</span></code>\r\n            </pre>\r\n\r\n                <p>紧接着，我们需要在Spring核心配置文件中添加如下配置：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-comment\">&lt;!-- 7.p(property，属性)名称空间的注入 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"orders\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.propertydemo.Orders\"</span> <span class=\"hljs-attribute\">p:oname</span>=<span class=\"hljs-value\">\"去你妈的！！！\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n\r\n                <p>最后将cn.itcast.property包下的TestIOC单元测试类的代码修改为：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TestIOC {\r\n@Test\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">demo1</span>() {\r\n<span class=\"hljs-comment\">// 1.加载Spring配置文件，把配置文件中的对象进行创建</span>\r\nApplicationContext context = \r\n    <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean1.xml\"</span>);\r\n\r\nOrders orders = (Orders)context.getBean(<span class=\"hljs-string\">\"orders\"</span>);\r\norders.testorders();\r\n}\r\n}</code>\r\n</pre>\r\n\r\n                <p>测试即可。 <br>\r\n                    <strong>结论——使用p名称空间：</strong></p>\r\n\r\n                <ul>\r\n                    <li><strong>普通属性：p:属性名称=”…”</strong></li>\r\n                    <li><strong>对象类型的属性：p:属性名称-ref=”…”</strong></li>\r\n                </ul>\r\n\r\n\r\n\r\n                <h2 id=\"注入复杂属性\"><a name=\"t26\"></a>注入复杂属性</h2>\r\n\r\n\r\n\r\n                <h3 id=\"注入数组类型的属性\"><a name=\"t27\"></a>注入数组类型的属性</h3>\r\n\r\n                <p>将cn.itcast.propertydemo包下的Orders类的代码修改为：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Orders {\r\n\r\n<span class=\"hljs-keyword\">private</span> String oname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setOname</span>(String oname) {\r\n<span class=\"hljs-keyword\">this</span>.oname = oname;\r\n}\r\n\r\n<span class=\"hljs-comment\">// 1.数组类型的属性</span>\r\n<span class=\"hljs-keyword\">private</span> String[] arrays;\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setArrays</span>(String[] arrays) {\r\n<span class=\"hljs-keyword\">this</span>.arrays = arrays;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testorders</span>() {\r\n<span class=\"hljs-comment\">// System.out.println(\"orders................\" + oname);</span>\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"数组：\"</span> + Arrays.toString(arrays));\r\n}\r\n}</code>\r\n</pre>\r\n\r\n                <p>然后需要在Spring核心配置文件中添加如下配置：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"orders\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.propertydemo.Orders\"</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 创建对象 --&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- 数组类型 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"arrays\"</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 注入属性 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">list</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>叶子<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>liayun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>杰哥<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">list</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n\r\n                <p>最后将cn.itcast.property包下的TestIOC单元测试类的代码修改为：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TestIOC {\r\n@Test\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">demo1</span>() {\r\n<span class=\"hljs-comment\">// 1.加载Spring配置文件，把配置文件中的对象进行创建</span>\r\nApplicationContext context = \r\n    <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean1.xml\"</span>);\r\nOrders orders = (Orders)context.getBean(<span class=\"hljs-string\">\"orders\"</span>);\r\norders.testorders();\r\n}\r\n}</code>\r\n</pre>\r\n\r\n                <p>测试即可。</p>\r\n\r\n\r\n\r\n                <h3 id=\"注入list集合类型的属性\"><a name=\"t28\"></a>注入List集合类型的属性</h3>\r\n\r\n                <p>将cn.itcast.propertydemo包下的Orders类的代码修改为：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Orders {\r\n\r\n<span class=\"hljs-keyword\">private</span> String oname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setOname</span>(String oname) {\r\n<span class=\"hljs-keyword\">this</span>.oname = oname;\r\n}\r\n\r\n<span class=\"hljs-comment\">// 2.list类型的属性</span>\r\n<span class=\"hljs-keyword\">private</span> List&lt;String&gt; list;\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setList</span>(List&lt;String&gt; list) {\r\n<span class=\"hljs-keyword\">this</span>.list = list;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testorders</span>() {\r\n<span class=\"hljs-comment\">// System.out.println(\"orders................\" + oname);</span>\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"list：\"</span> + list);\r\n}\r\n}</code>\r\n</pre>\r\n                <p>然后需要在Spring核心配置文件中添加如下配置：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"orders\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.propertydemo.Orders\"</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 创建对象 --&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- list类型 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"list\"</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">list</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>叶子<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>李昀玲<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>杰哥<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">list</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n\r\n                <p>cn.itcast.property包下的TestIOC单元测试类的代码勿须修改，直接测试即可。</p>\r\n\r\n\r\n\r\n                <h3 id=\"注入set集合类型的属性\"><a name=\"t29\"></a>注入Set集合类型的属性</h3>\r\n\r\n                <p>将cn.itcast.propertydemo包下的Orders类的代码修改为：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Orders {\r\n\r\n<span class=\"hljs-keyword\">private</span> String oname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setOname</span>(String oname) {\r\n<span class=\"hljs-keyword\">this</span>.oname = oname;\r\n}\r\n\r\n<span class=\"hljs-comment\">// 3.set类型的属性</span>\r\n<span class=\"hljs-keyword\">private</span> Set&lt;String&gt; keyset;\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setKeyset</span>(Set&lt;String&gt; keyset) {\r\n<span class=\"hljs-keyword\">this</span>.keyset = keyset;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testorders</span>() {\r\n<span class=\"hljs-comment\">// System.out.println(\"orders................\" + oname);</span>\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"set：\"</span> + keyset);\r\n}\r\n}</code>\r\n</pre>\r\n                <p>然后需要在Spring核心配置文件中添加如下配置：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"orders\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.propertydemo.Orders\"</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 创建对象 --&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- set类型 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"keyset\"</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">set</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>蝙蝠侠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>钢铁侠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>美美侠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">set</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n                <p>其实，以上配置也可以写为：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"orders\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.propertydemo.Orders\"</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 创建对象 --&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- set类型 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"keyset\"</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">list</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>蝙蝠侠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>钢铁侠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">value</span>&gt;</span>美美侠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">value</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">list</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n\r\n                <p>cn.itcast.property包下的TestIOC单元测试类的代码勿须修改，直接测试即可。</p>\r\n\r\n\r\n\r\n                <h3 id=\"注入map集合类型的属性\"><a name=\"t30\"></a>注入Map集合类型的属性</h3>\r\n\r\n                <p>将cn.itcast.propertydemo包下的Orders类的代码修改为：</p>\r\n\r\n\r\n\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Orders {\r\n\r\n<span class=\"hljs-keyword\">private</span> String oname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setOname</span>(String oname) {\r\n<span class=\"hljs-keyword\">this</span>.oname = oname;\r\n}\r\n\r\n<span class=\"hljs-comment\">// 4.map类型</span>\r\n<span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; map;\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMap</span>(Map&lt;String, String&gt; map) {\r\n<span class=\"hljs-keyword\">this</span>.map = map;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testorders</span>() {\r\n<span class=\"hljs-comment\">// System.out.println(\"orders................\" + oname);</span>\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"map：\"</span> + map);\r\n}\r\n}</code>\r\n</pre>\r\n                <p>然后需要在Spring核心配置文件中添加如下配置：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"orders\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.propertydemo.Orders\"</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 创建对象 --&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- map类型 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"map\"</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">map</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">entry</span> <span class=\"hljs-attribute\">key</span>=<span class=\"hljs-value\">\"username\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"潘金莲\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">entry</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">entry</span> <span class=\"hljs-attribute\">key</span>=<span class=\"hljs-value\">\"password\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"1314\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">entry</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">entry</span> <span class=\"hljs-attribute\">key</span>=<span class=\"hljs-value\">\"address\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"明初\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">entry</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">map</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n                <p>cn.itcast.property包下的TestIOC单元测试类的代码勿须修改，直接测试即可。</p>\r\n                <h3 id=\"注入properties类型的属性\"><a name=\"t31\"></a>注入Properties类型的属性</h3>\r\n                <p>将cn.itcast.propertydemo包下的Orders类的代码修改为：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cs has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Orders {\r\n\r\n<span class=\"hljs-keyword\">private</span> String oname;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setOname</span>(String oname) {\r\n<span class=\"hljs-keyword\">this</span>.oname = oname;\r\n}\r\n\r\n<span class=\"hljs-comment\">// 5.properties</span>\r\n<span class=\"hljs-keyword\">private</span> Properties properties;\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setProperties</span>(Properties properties) {\r\n<span class=\"hljs-keyword\">this</span>.properties = properties;\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testorders</span>() {\r\n<span class=\"hljs-comment\">// System.out.println(\"orders................\" + oname);</span>\r\nSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"properties：\"</span> + properties);\r\n}\r\n}</code>\r\n</pre>\r\n                <p>然后需要在Spring核心配置文件中添加如下配置：</p>\r\n                <pre class=\"prettyprint\" name=\"code\"><code class=\"hljs xml has-numbering\" onclick=\"mdcp.signin(event)\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"orders\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"cn.itcast.propertydemo.Orders\"</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 创建对象 --&gt;</span>\r\n<span class=\"hljs-comment\">&lt;!-- properties类型 --&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"properties\"</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">props</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">prop</span> <span class=\"hljs-attribute\">key</span>=<span class=\"hljs-value\">\"name\"</span>&gt;</span>宫本一郎<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">prop</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">prop</span> <span class=\"hljs-attribute\">key</span>=<span class=\"hljs-value\">\"address\"</span>&gt;</span>日本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">prop</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">props</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">property</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code>\r\n</pre>\r\n                <p>cn.itcast.property包下的TestIOC单元测试类的代码勿须修改，直接测试即可。</p>\r\n                <h2 id=\"ioc和di的区别\"><a name=\"t32\"></a>IoC和DI的区别</h2>\r\n                <ul>\r\n                    <li>IoC：控制反转，即把对象的创建交给Spring进行管理。所以Spring IoC容器是用来创建对象，管理依赖关系的。</li>\r\n                    <li>DI(Dependency Injection)：依赖注入，即在创建对象的过程中，向类里面的属性中设置值。</li>\r\n                    <li>IoC和DI的关系：依赖注入不能单独存在，须在控制反转基础之上完成，用更通俗点的话来说，就是注入类里面的属性值，不能直接注入，须创建类的对象再完成注入。</li>\r\n                </ul>\r\n                <h2 id=\"spring中的工厂\"><a name=\"t33\"></a>Spring中的工厂</h2>\r\n                <h3 id=\"applicationcontext\"><a name=\"t34\"></a>ApplicationContext</h3>\r\n                <p>ApplicationContext接口有两个实现类，如下图： <br>\r\n                    <img src=\"https://img-blog.csdn.net/20170408002558711?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWVyZW55dWFuX3BrdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\"\r\n                        alt=\"这里写图片描述\" title=\"\"></p>\r\n                <ul>\r\n                    <li>ClassPathXmlApplicationContext：加载的是类路径下的Spring配置文件</li>\r\n                    <li>FileSystemXmlApplicationContext：加载的是本地磁盘下的Spring配置文件</li>\r\n                </ul>\r\n                <h3 id=\"beanfactory\"><a name=\"t35\"></a>BeanFactory</h3>\r\n                <p>下面应该是BeanFactory类的继承体系图吧！ <br>\r\n                    <img src=\"https://img-blog.csdn.net/20170408002701923?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWVyZW55dWFuX3BrdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\"\r\n                        alt=\"这里写图片描述\" title=\"\"> <br>\r\n                    稍微了解一下就好，这个类在实际开发中我们并不需要用到。</p>\r\n                <h3 id=\"applicationcontext和beanfactory的区别\"><a name=\"t36\"></a>ApplicationContext和BeanFactory的区别</h3>\r\n                <p>虽然使用这两个对象都可以加载Spring的配置文件，并创建配置文件中的对象。但他俩还是有区别的，最主要的区别是：</p>\r\n                <ul>\r\n                    <li>使用applicationContext操作时，可把Spring里面的配置文件中的对象都进行创建。</li>\r\n                    <li>使用BeanFactory对象操作时，在调用getBean方法的时候进行对象的创建。</li>\r\n                </ul>\r\n                <h1 id=\"spring整合web项目的底层原理\"><a name=\"t37\"></a>Spring整合Web项目的底层原理</h1>\r\n                <p>在实际的开发中，我们一般会使用SSH(即Struts2、Spring、Hibernate)进行开发，然后创建Spring的配置文件，使用applicationContext对象加载配置文件，继而创建对象。在真正的开发中，我们一般不会直接写applicationContext代码加载配置文件。\r\n                </p>\r\n                <h2 id=\"spring整合web项目的思想\"><a name=\"t38\"></a>Spring整合Web项目的思想</h2>\r\n                <p>在服务器启动的时候，加载Spring配置文件，并创建对象。</p>\r\n                <h2 id=\"spring整合web项目的底层原理-1\"><a name=\"t39\"></a>Spring整合Web项目的底层原理</h2>\r\n                <p>Spring整合Web项目用到以下两个技术：</p>\r\n                <ul>\r\n                    <li>使用ServletContext对象(在服务器启动时创建)</li>\r\n                    <li>使用监听器</li>\r\n                </ul>\r\n                <p>在服务器启动的时候，每个项目都会创建一个ServletContext对象，而且每个项目只有一个ServletContext对象。在ServletContext对象创建的时候，使用监听器可以监听到其创建。当我们监听到ServletContext对象创建时，Spring就会帮我们做一件事情——加载Spring配置文件，并把配置文件中的对象进行创建，对象创建之后，放到ServletContext域里面去，最终我们要使用创建的对象，可从ServletContext域里面获取出来。\r\n                </p>\r\n    </div>\r\n"},{"title":"转-Spring技术核心概念纪要","ctime":"2019-12-16 14:15:11","type":"3","label":"3","content":"\r\n\r\n    <p>转自：<a\r\n            href=\"http://www.cnblogs.com/littleatp/p/5807268.html#\">http://www.cnblogs.com/littleatp/p/5807268.html#</a>\r\n    </p>\r\n\r\n    <div style=\"background-color: #7c7f7c1c; font-size: small; padding: 5px\">\r\n\r\n        <div style=\"float: left; padding-right: 15px\">\r\n            <img src=\"https://images.cnblogs.com/cnblogs_com/littleatp/1241412/o_qrcode_for_gh_b2cf486409a0_258.jpg\"\r\n                style=\"width: 120px; height: 120px\">\r\n        </div>\r\n\r\n        <div style=\"padding-top: 15px\">\r\n            <p>\r\n                作者：\r\n                <a href=\"http://www.cnblogs.com/littleatp/\">zale</a>\r\n            </p>\r\n            <p>\r\n                出处：\r\n                <a href=\"http://www.cnblogs.com/littleatp/\">http://www.cnblogs.com/littleatp/</a>, 如果喜欢我的文章，请<b\r\n                    style=\"font-size: medium\">关注我的公众号</b>\r\n            </p>\r\n\r\n            <p>\r\n                本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出\r\n                <a href=\"#\" style=\"color: #0; font-size: medium\">原文链接</a>\r\n                &nbsp;如有问题， 可留言咨询.\r\n            </p>\r\n\r\n        </div>\r\n        <div style=\"clear: both\"></div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n    <div id=\"cnblogs_post_body\" class=\"blogpost-body\">\r\n        <h1>一、背景</h1>\r\n        <p>springframework 从最初的2.5版本发展至今，期间已经发生了非常多的修正及优化。许多新特性及模块的出现，使得整个框架体系显得越趋庞大，同时也带来了学习及理解上的困难。</p>\r\n        <p>本文阐述了一些要点，并配合一些代码样例，这有助于快速理解 spring 框架。</p>\r\n        <h1>二、spring架构</h1>\r\n        <p><a href=\"http://wiki.jikexueyuan.com/project/spring/images/arch1.png\"><img\r\n                    src=\"http://wiki.jikexueyuan.com/project/spring/images/arch1.png\" alt=\"\" width=\"408\"\r\n                    height=\"354\"></a></p>\r\n        <h2>核心容器层</h2>\r\n        <h3>Core 模块</h3>\r\n        <p>提供了框架的基本组成部分，包括 IoC 及依赖注入功能。</p>\r\n        <h3>Bean 模块</h3>\r\n        <p>实现 Bean 管理，包括自动装配机制等功能； 其中BeanFactory是一个工厂模式的实现。</p>\r\n        <h3>Context 模块</h3>\r\n        <p>建立在 Core 和 Bean 模块基础上，通常用于访问配置及定义的任何对象。ApplicationContext 是上下文模块的重要接口。</p>\r\n        <h3>SpEL 模块</h3>\r\n        <p>表达式语言模块提供了运行时进行查询及操作一个对象的表达式机制。</p>\r\n        <h2>数据访问/集成</h2>\r\n        <h3>JDBC 模块</h3>\r\n        <p>用于替代繁琐的 JDBC API 的抽象层。</p>\r\n        <h3>ORM 模块</h3>\r\n        <p>对象关系数据库映射抽象层，可集成JPA，JDO，Hibernate，iBatis。</p>\r\n        <h3>OXM 模块</h3>\r\n        <p>XML消息绑定抽象层，支持JAXB，Castor，XMLBeans，JiBX，XStream。</p>\r\n        <h3>JMS 模块</h3>\r\n        <p>Java消息服务模块，实现消息生产-消费之类的功能。</p>\r\n        <h3>Transaction 模块</h3>\r\n        <p>事务模块为各种 POJO 支持编程式和声明式事务管理。</p>\r\n        <h2>Web应用</h2>\r\n        <h3>Web 模块</h3>\r\n        <p>Web MVC 提供了基于&nbsp;<strong>模型-视图-控制器</strong>&nbsp;的基础web应用框架。</p>\r\n        <h3>servlet 模块</h3>\r\n        <p>实现了统一的监听器以及和面向web应用的上下文，用以初始化 IoC 容器。</p>\r\n        <h3>Web-Portlet</h3>\r\n        <p>实现在 portlet 环境中实现 MVC。</p>\r\n        <h3>Web-Socket 模块</h3>\r\n        <p>为 WebSocket连接 提供支持。</p>\r\n        <h2>其他模块</h2>\r\n        <h3>AOP 模块</h3>\r\n        <p>提供了面向切面的编程实现，允许开发者通过定义方法拦截器及切入点对代码进行无耦合集成，它实现了关注点分离。</p>\r\n        <h3>Aspects 模块</h3>\r\n        <p>提供了与 AspectJ 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。</p>\r\n        <h3>Instrumentation 模块</h3>\r\n        <p>实现instrumentation支持，一般用以应用服务器的监测。</p>\r\n        <h3>Messaging 模块</h3>\r\n        <p>为STOMP 提供了支持，STOMP协议是一种简单的文本定向消息协议，是 WebSocket 的子协议。</p>\r\n        <h2>测试</h2>\r\n        <p>支持 JUnit 、TestNG 框架的集成</p>\r\n        <hr>\r\n        <h1>三、基础工程</h1>\r\n        <p>后续的工作将基于样例工程展开，首先需要准备JDK、Java IDE如Eclipse、Maven环境，此类工作较为简单，在此不作赘述。</p>\r\n        <ol>\r\n            <li>创建Maven项目；</li>\r\n            <li>配置Spring依赖；</li>\r\n        </ol>\r\n        <div class=\"cnblogs_code\">\r\n            <pre><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">dependency</span><span style=\"color: #0000ff;\">&gt;</span>\r\n            \r\n                <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">groupId</span><span style=\"color: #0000ff;\">&gt;</span>org.springframework<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">groupId</span><span style=\"color: #0000ff;\">&gt;</span>\r\n            \r\n                <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">artifactId</span><span style=\"color: #0000ff;\">&gt;</span>spring-context<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">artifactId</span><span style=\"color: #0000ff;\">&gt;</span>\r\n            \r\n                <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">version</span><span style=\"color: #0000ff;\">&gt;</span>4.3.2.RELEASE<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">version</span><span style=\"color: #0000ff;\">&gt;</span>\r\n            \r\n            <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">dependency</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <p>&nbsp; &nbsp; 3. 编写配置文件及测试代码；</p>\r\n        <p><strong>core-beans.xml</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n            \r\n            <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">beans </span><span style=\"color: #ff0000;\">xmlns</span><span style=\"color: #0000ff;\">=\"http://www.springframework.org/schema/beans\"</span><span style=\"color: #ff0000;\">\r\n            xmlns:xsi</span><span style=\"color: #0000ff;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"color: #ff0000;\">\r\n            xsi:schemaLocation</span><span style=\"color: #0000ff;\">=\"http://www.springframework.org/schema/beans\r\n            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n            \r\n                <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">bean </span><span style=\"color: #ff0000;\">id</span><span style=\"color: #0000ff;\">=\"randomID\"</span><span style=\"color: #ff0000;\"> class</span><span style=\"color: #0000ff;\">=\"org.springfoo.core.bean.RandomID\"</span><span style=\"color: #ff0000;\"> scope</span><span style=\"color: #0000ff;\">=\"prototype\"</span><span style=\"color: #ff0000;\"> \r\n                init-method</span><span style=\"color: #0000ff;\">=\"init\"</span><span style=\"color: #ff0000;\"> destroy-method</span><span style=\"color: #0000ff;\">=\"destroy\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n                <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">bean</span><span style=\"color: #0000ff;\">&gt;</span>\r\n            \r\n                <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">bean </span><span style=\"color: #ff0000;\">id</span><span style=\"color: #0000ff;\">=\"message\"</span><span style=\"color: #ff0000;\"> class</span><span style=\"color: #0000ff;\">=\"org.springfoo.core.bean.Message\"</span><span style=\"color: #ff0000;\"> scope</span><span style=\"color: #0000ff;\">=\"prototype\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n                    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">property </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"content\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"Hello sam\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n                    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">property </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"sender\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"bob\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n                    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">property </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"reciever\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"sam\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n                <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">bean</span><span style=\"color: #0000ff;\">&gt;</span>\r\n            <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">beans</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n        </div>\r\n        <pre><code>&nbsp;</code></pre>\r\n        <p><strong>POJO定义</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Message {\r\n            \r\n                </span><span style=\"color: #0000ff;\">private</span><span style=\"color: #000000;\"> String content;\r\n            \r\n                </span><span style=\"color: #0000ff;\">private</span><span style=\"color: #000000;\"> String sender;\r\n            \r\n                </span><span style=\"color: #0000ff;\">private</span><span style=\"color: #000000;\"> String reciever;\r\n            \r\n                </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> String getContent() {\r\n                    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> content;\r\n                }\r\n            \r\n                </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> setContent(String content) {\r\n                    </span><span style=\"color: #0000ff;\">this</span>.content =<span style=\"color: #000000;\"> content;\r\n                }\r\n                ...</span></pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <p><strong>测试代码</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre><span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> tryAppContext() {\r\n                ApplicationContext context </span>= <span style=\"color: #0000ff;\">new</span> ClassPathXmlApplicationContext(\"core-beans.xml\"<span style=\"color: #000000;\">);\r\n            \r\n                Message message </span>= context.getBean(Message.<span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">);\r\n                System.out.println(message);\r\n            }</span></pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <hr>\r\n        <h1>四、IOC 容器</h1>\r\n        <p><a href=\"http://wiki.jikexueyuan.com/project/spring/images/ioc1.jpg\"><img\r\n                    src=\"http://wiki.jikexueyuan.com/project/spring/images/ioc1.jpg\" alt=\"\" width=\"493\"\r\n                    height=\"363\"></a></p>\r\n        <p><strong>IOC</strong>&nbsp;即控制反转，将对象的生命周期管理、关系依赖通过容器实现，实现解耦。</p>\r\n        <p>ApplicationContext是最关键的入口，其包括几种实现：</p>\r\n        <ol>\r\n            <li>\r\n                <p>FileSystemXmlApplicationContext，从 XML 文件中加载被定义的 bean对象，基于文件系统路径加载配置；</p>\r\n            </li>\r\n            <li>\r\n                <p>ClassPathXmlApplicationContext，从 XML 文件中加载被定义的 bean对象，基于类路径加载配置；</p>\r\n            </li>\r\n            <li>\r\n                <p>WebXmlApplicationContext，从 XML 文件中加载被定义的 bean对象，基于 web 应用程序范围加载配置；</p>\r\n            </li>\r\n        </ol>\r\n        <h1>五、Bean 管理</h1>\r\n        <h2>5.1 作用域</h2>\r\n        <h3>singleton</h3>\r\n        <p>每一个 Spring IoC 容器中保持一个单一实例(默认)。</p>\r\n        <h3>prototype</h3>\r\n        <p>bean 的实例可为任意数量。</p>\r\n        <h3>request</h3>\r\n        <p>该作用域将 bean 的定义限制为 HTTP 请求。只在 web-aware Spring ApplicationContext 的上下文中有效。</p>\r\n        <h3>session</h3>\r\n        <p>该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。</p>\r\n        <h3>global-session</h3>\r\n        <p>该作用域将 bean 的定义限制为全局 HTTP 会话。只在 web-aware Spring ApplicationContext 的上下文中有效。</p>\r\n        <h2>5.2 生命周期</h2>\r\n        <p>Bean 的初始化及销毁对应 init 及 destroy 两个行为，可通过实现 InitializingBean/DisposableBean 接口观察对象的初始化及销毁时机。</p>\r\n        <p>代码片段：</p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>public void afterPropertiesSet() throws<span> Exception {\r\n                System.out.println(this + \"-- properties set\"<span>);\r\n            }\r\n            \r\n            public void<span> init() {\r\n                System.out.println(this + \"-- init\"<span>);\r\n            }\r\n            \r\n            public void<span> destroy() {\r\n                System.out.println(this + \"-- destroy\"<span>);\r\n            }</span></span></span></span></span></span></pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <p>为了使spring获得 destroy 行为的监视机会，需要注册JVM关闭回调：</p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>context.registerShutdownHook();</pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <p><strong>init/destroy拦截</strong></p>\r\n        <p>实现 BeanPostProcessor 接口，并注册到配置文件</p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>&lt;bean class=\"xxx.MyBeanPostProcessor\" /&gt;</pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <h2>5.3 bean模板</h2>\r\n        <p>通常可将一组属性归集为bean模板以实现复用</p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>&lt;!-- template --&gt;\r\n            &lt;bean id=\"template\" abstract=\"true\"&gt;\r\n                &lt;property name=\"support\" value=\"true\" /&gt;\r\n                &lt;property name=\"count\" value=\"10\" /&gt;\r\n            &lt;/bean&gt;\r\n            \r\n            &lt;bean id=\"tplbean\" class=\"org.springfoo.core.bean.TplBean\" parent=\"template\"&gt;\r\n                &lt;property name=\"message\" value=\"I'm inheritted from template\" /&gt;\r\n            &lt;/bean&gt;</pre>\r\n        </div>\r\n        <p><strong>POJO 定义</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>public class<span> TplBean {\r\n            \r\n                private<span> String message;\r\n                private boolean<span> support;\r\n                private<span> Integer count;\r\n                ...</span></span></span></span></pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <hr>\r\n        <h1>六、依赖注入</h1>\r\n        <h2>6.1 简单例子</h2>\r\n        <ol>\r\n            <li>\r\n                <p>People 包含 Hand/Foot/Body;</p>\r\n            </li>\r\n            <li>\r\n                <p>Hand/Foot 通过构造参数注入；</p>\r\n            </li>\r\n            <li>\r\n                <p>Body通过属性参数注入;</p>\r\n            </li>\r\n        </ol>\r\n        <p><strong>beans.xml</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>&lt;bean id=\"people\" class=\"org.springfoo.di.bean.People\" scope=\"prototype\"&gt;\r\n                &lt;constructor-arg ref=\"foot\"/&gt;\r\n                &lt;constructor-arg ref=\"hand\"/&gt;\r\n            \r\n                &lt;property name=\"body\" ref=\"body\"/&gt;\r\n            &lt;/bean&gt;\r\n            \r\n            \r\n            &lt;bean id=\"foot\" class=\"org.springfoo.di.bean.Foot\" scope=\"prototype\"&gt;\r\n                &lt;property name=\"label\" value=\"FOOT\" /&gt;\r\n            &lt;/bean&gt;\r\n            &lt;bean id=\"hand\" class=\"org.springfoo.di.bean.Hand\" scope=\"prototype\"&gt;\r\n                &lt;property name=\"label\" value=\"HAND\" /&gt;\r\n            &lt;/bean&gt;\r\n            &lt;bean id=\"body\" class=\"org.springfoo.di.bean.Body\" scope=\"prototype\"&gt;\r\n                &lt;property name=\"label\" value=\"BODY---BB\" /&gt;\r\n            &lt;/bean&gt;</pre>\r\n        </div>\r\n        <pre></pre>\r\n        <p><strong>People.java</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>public class People {\r\n            \r\n                private Foot foot;\r\n                private Hand hand;\r\n            \r\n                private Body body;\r\n            \r\n                public People(){\r\n            \r\n                }\r\n            \r\n                public People(Foot foot, Hand hand) {\r\n                super();\r\n                this.foot = foot;\r\n                this.hand = hand;\r\n                }\r\n            \r\n                public Foot getFoot() {\r\n                    return foot;\r\n                }\r\n            \r\n                public void setFoot(Foot foot) {\r\n                    this.foot = foot;\r\n                }\r\n            \r\n                public Hand getHand() {\r\n                    return hand;\r\n                }\r\n            \r\n                ...</pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <p>其余略</p>\r\n        <h2>6.2 注入集合</h2>\r\n        <p>可通过配置一组值的方式实现集合注入</p>\r\n        <p><strong>集合POJO</strong>&nbsp;</p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>@SuppressWarnings(\"rawtypes\")\r\n            public class CollectionBean {\r\n            \r\n            private List list;\r\n            private Set set;\r\n            private Map map;\r\n            private Properties prop;\r\n            \r\n            public List getList() {\r\n                return list;\r\n            }\r\n            \r\n            public void setList(List list) {\r\n                this.list = list;\r\n            }\r\n            \r\n            public Set getSet() {\r\n                return set;\r\n            }\r\n            \r\n            public void setSet(Set set) {\r\n                this.set = set;\r\n            }\r\n            \r\n            public Map getMap() {\r\n                return map;\r\n            }\r\n            \r\n            public void setMap(Map map) {\r\n                this.map = map;\r\n            }\r\n            \r\n            public Properties getProp() {\r\n                return prop;\r\n            }\r\n            \r\n            public void setProp(Properties prop) {\r\n                this.prop = prop;\r\n            }\r\n            \r\n            }</pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <p><strong>beans.xml</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>&lt;bean id=\"collection\" class=\"org.springfoo.di.bean.CollectionBean\"&gt;\r\n            \r\n                &lt;property name=\"list\"&gt;\r\n                    &lt;list&gt;\r\n                        &lt;value&gt;APPLE&lt;/value&gt;\r\n                        &lt;value&gt;ORANGE&lt;/value&gt;\r\n                        &lt;value&gt;PINAPPLE&lt;/value&gt;\r\n                    &lt;/list&gt;\r\n                &lt;/property&gt;\r\n            \r\n                &lt;property name=\"set\"&gt;\r\n                    &lt;set&gt;\r\n                        &lt;value&gt;TABLE&lt;/value&gt;\r\n                        &lt;value&gt;CHAIR&lt;/value&gt;\r\n                    &lt;/set&gt;\r\n                &lt;/property&gt;\r\n            \r\n                &lt;property name=\"map\"&gt;\r\n                    &lt;map&gt;\r\n                        &lt;entry key=\"b\" value=\"BEER\" /&gt;\r\n                        &lt;entry key=\"j\" value=\"JUICE\" /&gt;\r\n                    &lt;/map&gt;\r\n                &lt;/property&gt;\r\n            \r\n                &lt;property name=\"prop\"&gt;\r\n                    &lt;props&gt;\r\n                        &lt;prop key=\"sp\"&gt;Single Player&lt;/prop&gt;\r\n                        &lt;prop key=\"tp\"&gt;Two Player&lt;/prop&gt;\r\n                    &lt;/props&gt;\r\n                &lt;/property&gt;\r\n            &lt;/bean&gt;</pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <h2>6.3 自动装配</h2>\r\n        <p><strong>POJO定义</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>public class AutoWireBean {\r\n            \r\n                private String message;\r\n                private Body body;\r\n            \r\n                public String getMessage() {\r\n                    return message;\r\n                }\r\n                public void setMessage(String message) {\r\n                    this.message = message;\r\n                }\r\n                public Body getBody() {\r\n                    return body;\r\n                }\r\n                public void setBody(Body body) {\r\n                    this.body = body;\r\n                }\r\n            }</pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <p><strong>beans.xml</strong></p>\r\n        <div class=\"cnblogs_code\">\r\n            <pre>&lt;bean id=\"autowire\" class=\"org.springfoo.di.bean.AutoWireBean\"\r\n             autowire=\"byName\" scope=\"prototype\"&gt;\r\n            \r\n                &lt;property name=\"message\" value=\"okok autowire going...\"/&gt;\r\n            \r\n            &lt;/bean&gt;</pre>\r\n        </div>\r\n        <p>&nbsp;</p>\r\n        <p><strong>autowire类型</strong></p>\r\n        <ol>\r\n            <li>byName, 通过属性名称与配置中bean名称配对</li>\r\n            <li>byType， 通过属性类型与配置中bean类型配对</li>\r\n            <li>constructor， 通过构造函数中bean类型配对</li>\r\n        </ol>\r\n        <p>&nbsp;</p>\r\n        <h1>七、总结</h1>\r\n        <p>至此，关于 spring 的核心概念已经介绍完毕，接下来就是如何在实践中深化了。</p>\r\n        <p>相信只要理解了基础理念，在后续的项目中自然会得心应手，毕竟万变不离其宗。</p>\r\n    </div>\r\n\r\n\r\n\r\n"}]